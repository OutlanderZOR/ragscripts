//=================================================================================================
//			SQL BANKER
//=================================================================================================
-	script	RoT SQL Banker	-1,{
L_Start:
       set .@title$, "[" + "^36C60D" + "RoT Banker" + "^000000" + "]";
		cutin "kh_kyel01", 2;
       set @acc_exists, 0;
       set @user_pass$, "";
       query_sql "select 1, zeny, user_pass from sql_banker where account_id = "+getcharid(3), @acc_exists, @zeny, @user_pass$;
       if (!@acc_exists) goto L_First_Time;
       // VERIFICA SENHA
       if (@user_pass$!="") {
               mes .@title$;
               mes "Sua conta está protegida por senha.";
               mes "Informe a sua senha para continuar...";
               input @pw$;
               if (@user_pass$!=@pw$) {
                       mes "^EC0000" + "Senha Incorreta" + "^000000";
                       close;
               }
               next;
       }
       
// .ml$ + "Sair" + .mr$
L_Main_Menu:
       mes .@title$;
       mes "O que deseja?";

       set @qnt, 0;
       next;
       sleep2 100;
       switch(select(.ml$+"Depositar Zeny"+.mr$,.ml$+"Sacar Zeny"+.mr$, .ml$+"Visualizar Saldo"+.mr$,
       .ml$+"Visualizar Extrato"+.mr$, .ml$+"Alterar Senha"+.mr$, .ml$+"Apagar Senha"+.mr$, .ml$+"Sair"+.mr$)) {
               case 1:
                       mes .@title$;
                       mes "Entre a quantia que deseja depositar";
                       input @qnt;
                       next;
                       mes .@title$;
                       if (zeny < @qnt) || (@qnt <= 0) goto L_Invalid_Op;
                       mes "DEPÓSITO: ^EC0000"+@qnt+" z^000000";
                       menu .ml$ + "Confirmar" + .mr$,-,.ml$ + "Cancelar" + .mr$,L_Main_Menu;
                       next;
                       mes .@title$;
                       mes "Realizando transferencia... Aguarde.";
                       set zeny, zeny - @qnt;
                       announce "RoT SQL Banker: Não desconecte ou use comandos de warp durante a transferencia!",3,0xff0000;
                       sleep2 1;
                       query_sql "Update sql_banker set zeny = zeny + "+@qnt+" Where account_id = "+getcharid(3);
                       callfunc ("fnc_sql_banker_log",getcharid(3),getcharid(3),1,@qnt);
                       goto L_Sucessfull_Op;
                       break;
               case 2:
                       set @zeny, 0;
                       query_sql "Select zeny from sql_banker Where account_id = "+getcharid(3), @zeny;
                       mes .@title$;
                       mes "Entre o valor da quantia que deseja sacar";
                       input @qnt;
                       next;
                       mes .@title$;
                       if (@zeny < @qnt) || (@qnt <= 0) goto L_Invalid_Op;
                       mes "SAQUE: ^EC0000"+@qnt+"^000000";
                       menu .ml$ + "Confirmar" + .mr$,-,.ml$ + "Cancelar" + .mr$,L_Main_Menu;
                       next;
                       mes .@title$;
                       mes "Realizando transferencia... Aguarde.";
                       query_sql "Update sql_banker set zeny = zeny - "+@qnt+" Where account_id = "+getcharid(3);
                       announce "RoT SQL Banker: Não desconecte ou use comandos de warp durante a transferencia!",3,0xff0000;
                       sleep2 1;
                       set zeny, zeny + @qnt;
                       callfunc ("fnc_sql_banker_log",getcharid(3),getcharid(3),2,@qnt);
                       goto L_Sucessfull_Op;
                       break;
               case 3:
                       set @zeny$,"";
                       query_sql "Select FORMAT(zeny, 0) from sql_banker Where account_id = "+getcharid(3),@zeny$;
                       mes .@title$;
                       mes "Você possui em sua conta: ^E70AA5"+@zeny$+" z^000000";
                       next;
                       menu .ml$ + "Sair" + .mr$,-,.ml$ + "Menu Principal" + .mr$,L_Main_Menu;
               case 4:
                       set @index, 0;
                       do {
                               sleep2 100;
                               mes .@title$;
                               deletearray @id[0], getarraysize(@id);
                               deletearray @tipo_operacao[0], getarraysize(@tipo_operacao);
                               deletearray @nome_operacao$[0], getarraysize(@nome_operacao$);
                               deletearray @dt_operacao$[0], getarraysize(@dt_operacao$);
                               deletearray @zeny$[0], getarraysize(@zeny$);
                               query_sql "select a.id, a.tipo_operacao, b.nome_operacao, a.dt_operacao, "+
                               		   "FORMAT(a.zeny, 0) "+
                                       "from sql_banker_log a "+
                                       "join sql_banker_operacoes b on a.tipo_operacao = b.tipo_operacao "+
                                       "where a.acc_src = "+getcharid(3)+" OR a.acc_des = "+getcharid(3)+" " +
                                       "order by a.id desc limit "+@index+",6", @id, @tipo_operacao, @nome_operacao$, @dt_operacao$, @zeny$;
                               for (set @i, 0; @i < 6; set @i, @i + 1) {
									if (@id[@i]) {
										switch(@tipo_operacao[@i]) {
										       case 1: set @color_op$,"^369915"; break;
										       case 2: set @color_op$,"^E70A0A"; break;
										}
										mes "^ACACAC-----------------------------^000000";
										mes @color_op$ + @nome_operacao$[@i] + " ("+@id[@i]+"): ^000000 ^757575" + @dt_operacao$[@i] + "^000000";
										mes "^651D67" + "VALOR:" + "^000000" + " - ^E70AA5" + @zeny$[@i] + " z^000000";
									}
                               }
                               next;
                               set @option, select(.ml$+"Avançar Resultados >>"+.mr$,.ml$+"<< Retornar Resultados"+.mr$,.ml$+"Menu Principal"+.mr$);
                               switch(@option) {
                                       case 1:
                                               set @index, @index + 6;
                                               break;
                                       case 2:
                                               if (@index - 6 >= 0) set @index, @index - 6;
                                               break;
                               }
                       } while (@option!=3);
                       goto L_Main_Menu;
               case 5:
                       mes .@title$;
                       if (@user_pass$ == "") {
                               mes "Você ainda não criou uma senha para a sua conta. Deseja criar agora?";
                               next;
                               menu .ml$ + "Sim - Criar Senha" + .mr$,-,.ml$ + "Não - Retornar ao Menu Principal" + .mr$,L_Main_Menu;
                               mes .@title$;
                       }
                       set @new_pw$, callfunc("fnc_PW_Dialog",@user_pass$);
                       if (@new_pw$=="") close;
                       query_sql "Update sql_banker set user_pass = '"+@new_pw$+"' where account_id ="+getcharid(3);
                       next;
                       mes .@title$;
                       mes "Senha alterada.";
                       goto L_Main_Menu;
                       break;
               case 6:
                       query_sql "Update sql_banker set user_pass = '' where account_id ="+getcharid(3);
                       mes .@title$;
                       mes "Senha removida.";
                       close2;
                       break;
               case 7:
               	   close2;
               		break;
       }
       cutin "", 255;
       end;

// MENSAGEM DE OPERAÇÃO SUCEDIDA
L_Sucessfull_Op:
       mes "^369915" + "Operação concluída." + "^000000";
       mes "Deseja realizar mais alguma transação?";
       next;
       menu .ml$ + "Sair" + .mr$,-,.ml$ + "Menu Principal" + .mr$,L_Main_Menu;
       cutin "", 255;
       close;

// MENSAGEM DE OPERAÇÃO INVÁLIDA
L_Invalid_Op:
       mes "A quantia informada não é válida, por favor, verifique os valores digitados e tente novamente";
       goto L_Main_Menu;
       end;

// MENSAGEM EXIBIDA NO PRIMEIRO ACESSO
L_First_Time:
       mes .@title$;
       if (sex) { mes "hmm.. vejo que vc é novo por aqui."; } else { mes "hmm.. vejo que vc é nova por aqui."; }
       mes "Tudo indica que ainda não existe um cadastro em seu nome.";
L_Rollback_First_Time:
       next;
       switch(select(.ml$+"Abrir conta"+.mr$, .ml$+"Informações"+.mr$)) {
               case 1:
                       query_sql "Insert into sql_banker (account_id, zeny, user_pass) VALUES ("+getcharid(3)+", 0, '')";
                       mes .@title$;
                       mes "Sua conta foi criada com sucesso, agora você já poderá começar a usa-la.";
                       next;
                       goto L_Start;
               case 2:
                       mes .@title$;
                       mes "O Sql Banker utiliza transações em banco de dados para guardar seu dinheiro.";
                       goto L_Rollback_First_Time;
                       break;
       }
       end;


// INICIALIZAÇÃO DE VARIÁVEIS
OnInit:
       set .ml$, "(^20AF1D$^000000) ^131E11";
       set .mr$, "^000000 (^20AF1D$^000000)";

end;

}

function	script	fnc_sql_banker_log	{
       set @acc_src, getarg(0);
       set @acc_des, getarg(1);
       set @tipo_operacao, getarg(2);
       set @zeny, getarg(3);
       query_sql "Insert Into sql_banker_log (acc_src, acc_des, tipo_operacao, dt_operacao, zeny) VALUES "+
       "("+@acc_src+","+@acc_des+","+@tipo_operacao+",now(),"+@zeny+")";
       return;
}

function	script	fnc_PW_Dialog	{
       // VERIFICA SE JÁ EXISTE UMA SENHA CRIADA E PEDE INFORMAÇÕES
       if (getarg(0)!="") {
               mes "Informe sua atual senha...";
               input @old_pw$;
               if (getarg(0) != @old_pw$) {
                       mes "Senha incorreta.";
                       return "";
               }
       }
       // TESTE DE TAMANHO
       mes "Informe sua nova senha...";
       input @pw_1$;
       if (getstrlen(@pw_1$) < 3) || (getstrlen(@pw_2$) > 15) {
               mes "Sua senha deve ter no mínimo 4 caracteres e no máximo 15 caracteres.";
               return "";
       }
       // VERIFICA SENHA INFORMADA
       mes "Repita a nova senha...";
       input @pw_2$;
       if (@pw_1$ != @pw_2$) {
               mes "As duas senhas informadas são diferentes.";
               return "";
       }
       return @pw_1$;
}

prontera,141,175,6	duplicate(RoT SQL Banker)	RoT SQL Banker#rsb01	833
quiz_00,64,34,4	duplicate(RoT SQL Banker)	RoT SQL Banker#rsb02	833